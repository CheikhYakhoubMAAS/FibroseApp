#!/usr/bin/env python3
"""
Script de d√©marrage pour l'application Fibrose H√©patique
Lance le serveur FastAPI avec les bonnes configurations
"""

import os
import sys
import subprocess
import time
from pathlib import Path

def check_dependencies():
    """V√©rifie que toutes les d√©pendances sont install√©es"""
    print("üîç V√©rification des d√©pendances...")
    
    # V√©rifier Python
    if sys.version_info < (3, 8):
        print("‚ùå Python 3.8+ requis")
        return False
    
    # V√©rifier les packages Python
    try:
        import fastapi
        import uvicorn
        import sqlalchemy
        print("‚úÖ D√©pendances Python OK")
    except ImportError as e:
        print(f"‚ùå D√©pendances Python manquantes: {e}")
        print("Installez avec: pip install -r requirements.txt")
        return False
    
    return True

def check_database():
    """V√©rifie la connexion √† la base de donn√©es"""
    print("üîç V√©rification de la base de donn√©es...")
    
    try:
        from app.database import engine
        from sqlalchemy import text
        
        with engine.connect() as conn:
            conn.execute(text("SELECT 1"))
        print("‚úÖ Connexion √† la base de donn√©es OK")
        return True
    except Exception as e:
        print(f"‚ùå Erreur de connexion √† la base de donn√©es: {e}")
        print("V√©rifiez votre configuration dans .env")
        return False

def init_database():
    """Initialise la base de donn√©es si n√©cessaire"""
    print("üîß Initialisation de la base de donn√©es...")
    
    try:
        from scripts.init_db import init_database
        init_database()
        return True
    except Exception as e:
        print(f"‚ùå Erreur lors de l'initialisation: {e}")
        return False

def start_server():
    """D√©marre le serveur FastAPI"""
    print("üöÄ D√©marrage du serveur FastAPI...")
    
    # Configuration par d√©faut
    host = os.getenv("HOST", "0.0.0.0")
    port = int(os.getenv("PORT", "8000"))
    
    print(f"üìç Serveur accessible sur: http://{host}:{port}")
    print(f"üìö Documentation API: http://{host}:{port}/docs")
    print(f"üìñ Documentation ReDoc: http://{host}:{port}/redoc")
    print("\nüîÑ Red√©marrage automatique activ√©")
    print("‚èπÔ∏è  Appuyez sur Ctrl+C pour arr√™ter")
    print("-" * 50)
    
    # D√©marrer le serveur
    try:
        import uvicorn
        uvicorn.run(
            "app.main:app",
            host=host,
            port=port,
            reload=True,
            log_level="info"
        )
    except KeyboardInterrupt:
        print("\nüõë Serveur arr√™t√©")
    except Exception as e:
        print(f"‚ùå Erreur lors du d√©marrage: {e}")

def main():
    """Fonction principale"""
    print("üè• Application de D√©tection Pr√©coce de Fibrose H√©patique")
    print("=" * 60)
    
    # V√©rifications pr√©alables
    if not check_dependencies():
        sys.exit(1)
    
    if not check_database():
        print("\nüí° Solutions possibles:")
        print("1. V√©rifiez que MySQL est d√©marr√©")
        print("2. Cr√©ez la base de donn√©es: CREATE DATABASE fibrose_app;")
        print("3. V√©rifiez votre configuration dans .env")
        sys.exit(1)
    
    # Initialiser la base de donn√©es
    if not init_database():
        print("‚ö†Ô∏è  L'initialisation a √©chou√©, mais on continue...")
    
    # D√©marrer le serveur
    start_server()

if __name__ == "__main__":
    main() 